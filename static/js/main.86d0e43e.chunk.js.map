{"version":3,"sources":["ModuleStyles/PhoneBook.module.css","Components/ContactForm.jsx","Components/Filter.jsx","Components/ContactItem.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","toast","configure","ContactForm","state","name","number","handleChange","e","setState","target","value","handleChangeNum","notifiation","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleSubmit","preventDefault","contacts","props","find","contact","toLowerCase","addContact","this","className","style","submitForm","onSubmit","details","type","onChange","mask","addContactBtn","Component","Filter","handleFilter","filter","searchForm","formDescription","searchInput","ContactItem","id","onRemove","contactName","contactDetails","contactPhone","removeButton","onClick","App","showFilteredContacts","includes","length","contactCard","uuidv4","prevState","alert","deleteContact","getContactFromStorage","localStorage","getItem","JSON","parse","prevProp","setItem","stringify","phonebook","bg","CSSTransition","appear","in","timeout","unmountOnExit","classNames","TransitionGroup","component","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0LACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,QAAU,2BAA2B,cAAgB,iCAAiC,WAAa,8BAA8B,eAAiB,kCAAkC,YAAc,+BAA+B,aAAe,gCAAgC,gBAAkB,mCAAmC,WAAa,gC,uMCM7YC,IAAMC,Y,IAGeC,E,4MACnBC,MAAQ,CAAEC,KAAM,GAAIC,OAAQ,I,EAC5BC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEJ,KAAMG,EAAEE,OAAOC,S,EAEjCC,gBAAkB,SAACJ,GACjB,EAAKC,SAAS,CAAEH,OAAQE,EAAEE,OAAOC,S,EAEnCE,YAAc,WACZZ,IAAMa,MAAN,UAAe,EAAKV,MAAMC,KAA1B,wBAAsD,CACpDU,SAAU,aACVC,UAAW,KACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,K,EAGdC,aAAe,SAACf,GACdA,EAAEgB,iBACF,IAAMC,EAAW,EAAKC,MAAMD,SACpBpB,EAAS,EAAKD,MAAdC,KAENoB,EAASE,MACP,SAACC,GAAD,OAAaA,EAAQvB,KAAKwB,gBAAkBxB,EAAKwB,iBAGnD,EAAKhB,eAEL,EAAKa,MAAMI,WAAW,EAAK1B,MAAMC,KAAM,EAAKD,MAAME,QAClD,EAAKG,SAAS,CAAEJ,KAAM,GAAIC,OAAQ,O,uDAI5B,IAAD,EACkByB,KAAK3B,MAAtBC,EADD,EACCA,KAAMC,EADP,EACOA,OACd,OACE,0BAAM0B,UAAWC,IAAMC,WAAYC,SAAUJ,KAAKR,cAChD,0BAAMS,UAAWC,IAAMG,SAAvB,UACA,2BAAOC,KAAK,OAAO1B,MAAON,EAAMiC,SAAUP,KAAKxB,eAC/C,6BACA,0BAAMyB,UAAWC,IAAMG,SAAvB,UACA,kBAAC,IAAD,CACEG,KAAK,kBACLF,KAAK,OACL1B,MAAOL,EACPgC,SAAUP,KAAKnB,kBAGjB,6BACA,4BACEoB,UAAWC,IAAMO,cACjBL,SAAUJ,KAAKR,aACfc,KAAK,UAEJhC,EAAI,cAAUA,GAAS,oB,GAxDOoC,aCP1B,SAASC,EAAT,GAA2C,IAAzBC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,OAC7C,OACE,0BAAMZ,UAAWC,IAAMY,YACrB,0BAAMb,UAAWC,IAAMa,iBAAvB,yBACA,2BACEd,UAAWC,IAAMc,YACjBT,SAAUK,EACVhC,MAAOiC,EACPP,KAAK,UCRE,SAASW,EAAT,GAAsD,IAA/B3C,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,OAAQ2C,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,SACtD,OACE,4BACE,0BAAMlB,UAAS,UAAKC,IAAMkB,YAAX,YAA0BlB,IAAMmB,iBAC5C/C,EAAO,KAEV,0BAAM2B,UAAS,UAAKC,IAAMoB,aAAX,YAA2BpB,IAAMmB,iBAC7C9C,GAEH,4BACE0B,UAAWC,IAAMqB,aACjBjB,KAAK,SACLkB,QAAS,kBAAML,EAASD,KAH1B,W,oCCFeO,E,4MACnBpD,MAAQ,CACNqB,SAAU,GACVmB,OAAQ,I,EAaVD,aAAe,SAACnC,GACd,EAAKC,SAAS,CAAEmC,OAAQpC,EAAEE,OAAOC,S,EAGnC8C,qBAAuB,WAAO,IAAD,EACE,EAAKrD,MAA1BwC,EADmB,EACnBA,OAER,OAH2B,EACXnB,SAEAmB,QAAO,SAAChB,GAAD,OACrBA,EAAQvB,KAAKwB,cAAc6B,SAASd,EAAOf,mB,EAI/CC,WAAa,SAACzB,EAAMC,GAClB,GAAID,EAAKsD,QAAU,EAAG,CACpB,IAAIC,EAAc,CAAEvD,KAAMA,EAAMC,OAAQA,EAAQ2C,GAAIY,eACpD,EAAKpD,UAAS,SAACqD,GACb,MAAO,CAAErC,SAAS,GAAD,mBAAMqC,EAAUrC,UAAhB,CAA0BmC,aAG7CG,MAAM,kC,EAIVC,cAAgB,SAACf,GACf,EAAKxC,UAAS,SAACqD,GACb,MAAO,CACLrC,SAAUqC,EAAUrC,SAASmB,QAAO,SAAChB,GAAD,OAAaA,EAAQqB,KAAOA,U,kEApCpE,IAAMgB,EAAwBC,aAAaC,QAAQ,WAC/CF,GACFlC,KAAKtB,SAAS,CAAEgB,SAAU2C,KAAKC,MAAMJ,O,yCAGtBK,EAAUR,GACvBA,EAAUrC,WAAaM,KAAK3B,MAAMqB,UACpCyC,aAAaK,QAAQ,UAAWH,KAAKI,UAAUzC,KAAK3B,MAAMqB,a,+BAkCpD,IAAD,SACsBM,KAAK3B,MAA1BqB,EADD,EACCA,SAAUmB,EADX,EACWA,OAElB,OACE,yBAAKZ,UAAWC,IAAMwC,WACpB,kBAAC,IAAD,CAAapC,KAAK,UAAUqC,IAAI,IAChC,kBAACC,EAAA,EAAD,CACEC,QAAQ,EACRC,IAAI,EACJC,QAAS,IACTC,eAAa,EACbC,WAAW,QAEX,0CAEF,kBAAC,EAAD,CAAavD,SAAUA,EAAUK,WAAYC,KAAKD,aAClD,wCACCL,EAASkC,OAAS,GACjB,kBAACjB,EAAD,CAAQC,aAAcZ,KAAKY,aAAcC,OAAQA,IAEnD,kBAACqC,EAAA,EAAD,CAAiBC,UAAU,MACxBnD,KAAK0B,uBAAuB0B,KAAI,gBAAG9E,EAAH,EAAGA,KAAM4C,EAAT,EAASA,GAAI3C,EAAb,EAAaA,OAAb,OAC/B,kBAACqE,EAAA,EAAD,CAAeS,IAAKnC,EAAI6B,QAAS,IAAKE,WAAW,SAC/C,kBAAChC,EAAD,CACEoC,IAAKnC,EACLC,SAAU,EAAKc,cACf3D,KAAMA,EACN4C,GAAIA,EACJ3C,OAAQA,c,GA3ESmC,aCEb4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvF,GACLwF,QAAQxF,MAAMA,EAAMyF,c","file":"static/js/main.86d0e43e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"PhoneBook_phonebook__2DcGW\",\"details\":\"PhoneBook_details__3ehCp\",\"addContactBtn\":\"PhoneBook_addContactBtn__Mo0pn\",\"submitForm\":\"PhoneBook_submitForm__2xI-m\",\"contactDetails\":\"PhoneBook_contactDetails__2Lcd5\",\"contactName\":\"PhoneBook_contactName__33SH9\",\"removeButton\":\"PhoneBook_removeButton__Do9_U\",\"formDescription\":\"PhoneBook_formDescription__3bOPh\",\"searchForm\":\"PhoneBook_searchForm__aoNcE\"};","import React, { Component } from \"react\";\nimport style from \"../ModuleStyles/PhoneBook.module.css\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport InputMask from \"react-input-mask\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ntoast.configure();\n\n\nexport default class ContactForm extends Component {\n  state = { name: \"\", number: \"\" };\n  handleChange = (e) => {\n    this.setState({ name: e.target.value });\n  };\n  handleChangeNum = (e) => {\n    this.setState({ number: e.target.value });\n  };\n  notifiation = () => {\n    toast.error(`${this.state.name} is already in list!`, {\n      position: \"top-center\",\n      autoClose: 2500,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const contacts = this.props.contacts;\n    const { name } = this.state;\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      this.notifiation();\n    } else {\n      this.props.addContact(this.state.name, this.state.number);\n      this.setState({ name: \"\", number: \"\" });\n    }\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={style.submitForm} onSubmit={this.handleSubmit}>\n        <span className={style.details}>Name: </span>\n        <input type=\"text\" value={name} onChange={this.handleChange}></input>\n        <br></br>\n        <span className={style.details}>Phone:</span>\n        <InputMask\n          mask=\"(999)-999-99-99\"\n          type=\"text\"\n          value={number}\n          onChange={this.handleChangeNum}\n        ></InputMask>\n\n        <br></br>\n        <button\n          className={style.addContactBtn}\n          onSubmit={this.handleSubmit}\n          type=\"submit\"\n        >\n          {name ? `Add ${name}` : \"Add Contact\"}\n        </button>\n      </form>\n    );\n  }\n}\nContactForm.propTypes = {\n  contacts: PropTypes.array,\n  addContact: PropTypes.func,\n};\n","import React from \"react\";\nimport style from \"../ModuleStyles/PhoneBook.module.css\";\nimport PropTypes from \"prop-types\";\nexport default function Filter({ handleFilter, filter }) {\n  return (\n    <form className={style.searchForm}>\n      <span className={style.formDescription}>Find contacts by name</span>\n      <input\n        className={style.searchInput}\n        onChange={handleFilter}\n        value={filter}\n        type=\"text\"\n      ></input>\n    </form>\n  );\n}\nFilter.propTypes = { handleFilter: PropTypes.func, filter: PropTypes.string };\n","import React from \"react\";\nimport style from \"../ModuleStyles/PhoneBook.module.css\";\nimport PropTypes from \"prop-types\";\nexport default function ContactItem({ name, number, id, onRemove }) {\n  return (\n    <li>\n      <span className={`${style.contactName} ${style.contactDetails}`}>\n        {name + \":\"}\n      </span>\n      <span className={`${style.contactPhone} ${style.contactDetails}`}>\n        {number}\n      </span>\n      <button\n        className={style.removeButton}\n        type=\"button\"\n        onClick={() => onRemove(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\nContactItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n  onRemove: PropTypes.func,\n};\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactForm from \"./Components/ContactForm.jsx\";\nimport Filter from \"./Components/Filter\";\nimport ContactItem from \"./Components/ContactItem.jsx\";\nimport style from \"./ModuleStyles/PhoneBook.module.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport \"./ModuleStyles/animations.css\";\nimport ParticlesBg from \"particles-bg\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n  componentDidMount() {\n    const getContactFromStorage = localStorage.getItem(\"contact\");\n    if (getContactFromStorage) {\n      this.setState({ contacts: JSON.parse(getContactFromStorage) });\n    }\n  }\n  componentDidUpdate(prevProp, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contact\", JSON.stringify(this.state.contacts));\n    }\n  }\n  handleFilter = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  showFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  addContact = (name, number) => {\n    if (name.length >= 1) {\n      let contactCard = { name: name, number: number, id: uuidv4() };\n      this.setState((prevState) => {\n        return { contacts: [...prevState.contacts, contactCard] };\n      });\n    } else {\n      alert(\"First you have enter the name\");\n    }\n  };\n\n  deleteContact = (id) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter((contact) => contact.id !== id),\n      };\n    });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    return (\n      <div className={style.phonebook}>\n        <ParticlesBg type=\"tadpole\" bg={true}></ParticlesBg>\n        <CSSTransition\n          appear={true}\n          in={true}\n          timeout={2000}\n          unmountOnExit\n          classNames=\"logo\"\n        >\n          <h2>Phonebook</h2>\n        </CSSTransition>\n        <ContactForm contacts={contacts} addContact={this.addContact} />\n        <h2>Contacts</h2>\n        {contacts.length > 1 && (\n          <Filter handleFilter={this.handleFilter} filter={filter} />\n        )}\n        <TransitionGroup component=\"ul\">\n          {this.showFilteredContacts().map(({ name, id, number }) => (\n            <CSSTransition key={id} timeout={300} classNames=\"items\">\n              <ContactItem\n                key={id}\n                onRemove={this.deleteContact}\n                name={name}\n                id={id}\n                number={number}\n              />\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}